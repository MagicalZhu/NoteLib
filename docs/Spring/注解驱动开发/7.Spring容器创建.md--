[TOC]

# 1.Spring容器创建(refresh)

- 通过 `AbstractApplicationContext #refresh()` 创建刷新容器

<font color=red size=3>**AbstractApplicationContext #refresh()**</font>

```java
public void refresh() throws BeansException, IllegalStateException {
    synchronized (this.startupShutdownMonitor) {
        // 刷新容器前的预处理(准备)
        prepareRefresh();

        // 获取BeanFactory
        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();
 
	    //BeanFactory的预准备工作（BeanFactory进行一些设置)
        prepareBeanFactory(beanFactory);
        try {
            // BeanFactory准备工作完成后进行的后置处理工作
            postProcessBeanFactory(beanFactory);

            // 执行BeanFactoryPostProcessor的方法 (BeanFactory的后置处理器)
            invokeBeanFactoryPostProcessors(beanFactory);

            // 注册BeanPostProcessor（Bean的后置处理器）
            registerBeanPostProcessors(beanFactory);

            // 初始化MessageSource组件（做国际化功能；消息绑定，消息解析）
            initMessageSource();

            // 初始化事件派发器
            initApplicationEventMulticaster();

            // 留给子容器（子类）
            onRefresh();

            // 给容器中将所有项目里面的ApplicationListener注册进来
            registerListeners();

            // 初始化所有剩下的单实例bean
            finishBeanFactoryInitialization(beanFactory);

            // 完成BeanFactory的初始化创建工作；IOC容器就创建完成
            finishRefresh();
        }
        catch (BeansException ex) {
            if (logger.isWarnEnabled()) {
                logger.warn("Exception encountered during context initialization - " +
                            "cancelling refresh attempt: " + ex);
            }       
            destroyBeans();
            cancelRefresh(ex);
            throw ex;
        }
        finally {
            resetCommonCaches();
        }
    }
}
```



## 1.1 BeanFactory预准备

### 1.1.1 prepareRefresh( 刷新前预处理 )

- 刷新容器前的预处理
- 包含的方法
  - `initPropertySources()` 
    - 初始化一些属性设置 , 由子类 自定义个性化的属性设置方法
  - `getEnvironment().validateRequiredProperties()`
    - 检验属性的合法性
    - 参看 <font color=red>ConfigurablePropertyResolver#setRequiredProperties()</font>
  - `earlyApplicationEvents= new LinkedHashSet<ApplicationEvent>()`
    - 保存容器中的一些早期的事件

<font color=red size=3>**AbstractApplicationContext #prepareRefresh()**</font>

```java
/**
* Prepare this context for refreshing, setting its startup date and
* active flag as well as performing any initialization of property sources.
*/
protected void prepareRefresh() {
    // 设置容器的状态
    this.startupDate = System.currentTimeMillis();
    this.closed.set(false);
    this.active.set(true);
    if (logger.isDebugEnabled()) {
        if (logger.isTraceEnabled()) {
            logger.trace("Refreshing " + this);
        }
        else {
            logger.debug("Refreshing " + getDisplayName());
        }
    }
    // 初始化一些属性设置 , 由子类 自定义个性化的属性设置方法
    initPropertySources();

    // 检验属性的合法性
    // see ConfigurablePropertyResolver#setRequiredProperties
    getEnvironment().validateRequiredProperties();
    if (this.earlyApplicationListeners == null) {
        this.earlyApplicationListeners = new LinkedHashSet<>(this.applicationListeners);
    }
    else {
        this.applicationListeners.clear();
        this.applicationListeners.addAll(this.earlyApplicationListeners);
    }
    //用于 保存容器中的一些早期的事件
    this.earlyApplicationEvents = new LinkedHashSet<>();
}
```



### 1.1.2 obtainFreshBeanFactory( 获取BeanFactory )

- `refreshBeanFactory()`  : 刷新BeanFactory
  - 实际调用了 ==GenericApplicationContext #refreshBeanFactory()==
    - 创建了BeanFactory
      - this.beanFactory = new DefaultListableBeanFactory( )
    - 设置序列化ID
      - this.beanFactory.setSerializationId( getId( ) )
- `getBeanFactory()`
  - 返回 GenericApplicationContext 创建的BeanFactory对象 ( DefaultListableBeanFactory )

<font color=red size=3>**1. AbstractApplicationContext #obtainFreshBeanFactory()**</font>

```java
/**
* Tell the subclass to refresh the internal bean factory.
* @return the fresh BeanFactory instance
* @see #refreshBeanFactory()
* @see #getBeanFactory()
*/
protected ConfigurableListableBeanFactory obtainFreshBeanFactory() {
    refreshBeanFactory();
    return getBeanFactory();
}
```

<font color=red size=3>**2. GenericApplicationContext #refreshBeanFactory()**</font>

```java
/**
* Do nothing: We hold a single internal BeanFactory and rely on callers
* to register beans through our public methods (or the BeanFactory's).
* @see #registerBeanDefinition
*/
@Override
protected final void refreshBeanFactory() throws IllegalStateException {
    if (!this.refreshed.compareAndSet(false, true)) {
        throw new IllegalStateException(
            "GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once");
    }
    // 设置序列化ID
    this.beanFactory.setSerializationId(getId());
}
```

<font color=red size=3>**3. GenericApplicationContext #getBeanFactory()**</font>

```java
/**
* Return the single internal BeanFactory held by this context (as ConfigurableListableBeanFactory).
*/
@Override
public final ConfigurableListableBeanFactory getBeanFactory() {
    return this.beanFactory;
}
```



### 1.1.3 prepareBeanFactory(beanFactory) (设置BeanFactory)

- BeanFactory的预准备工作（BeanFactory进行设置一些特性）
- <font color=red>**常见的一些属性**</font>
  - 设置BeanFactory的类加载器、SPEL支持表达式解析器...
  - 添加部分BeanPostProcessor
    - ApplicationContextAwareProcessor
  - 设置忽略的自动装配的接口
    - EnvironmentAware、EmbeddedValueResolverAware、ResourceLoaderAware、ApplicationEventPublisherAware、MessageSourceAware、ApplicationContextAware
    - 这些无法通过接口类型自动注入
  - 注册可以解析的自动装配 , 
    - BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
    - 我们能直接在任何组件中 通过@AutoWired 自动注入
  - 添加BeanPostProcessor
    - ApplicationListenerDetector
  - 添加编译时的AspectJ
  - 给BeanFactory中注册一些能用的组件
    - environment【ConfigurableEnvironment】
    - systemProperties【Map<String, Object>】
    - systemEnvironment【Map<String, Object>】	

**[ 源码 ]**

<font color=red size=3>**AbstractApplicationContext #prepareBeanFactory(ConfigurableListableBeanFactory beanFactory)**</font>

```java
/**
* Configure the factory's standard context characteristics,
* such as the context's ClassLoader and post-processors.
* @param beanFactory the BeanFactory to configure
*/
protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) {
    // Tell the internal bean factory to use the context's class loader etc.
    beanFactory.setBeanClassLoader(getClassLoader());
    beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));
    beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));

    // Configure the bean factory with context callbacks.
    beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));
    beanFactory.ignoreDependencyInterface(EnvironmentAware.class);
    beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);
    beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);
    beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);
    beanFactory.ignoreDependencyInterface(MessageSourceAware.class);
    beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);

    // BeanFactory interface not registered as resolvable type in a plain factory.
    // MessageSource registered (and found for autowiring) as a bean.
    beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);
    beanFactory.registerResolvableDependency(ResourceLoader.class, this);
    beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);
    beanFactory.registerResolvableDependency(ApplicationContext.class, this);

    // Register early post-processor for detecting inner beans as ApplicationListeners.
    beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));

    // Detect a LoadTimeWeaver and prepare for weaving, if found.
    if (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {
        beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));
        // Set a temporary ClassLoader for type matching.
        beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));
    }

    // Register default environment beans.
    if (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) {
        beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());
    }
    if (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) {
        beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());
    }
    if (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) {
        beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());
    }
}
```



### 1.1.4 postProcessBeanFactory(beanFactory) (BeanFactory后置处理工作)

- BeanFactory准备工作完成后进行的后置处理工作
- `子类通过重写这个方法 , 在BeanFactory创建并预准备完成以后做进一步的设置`

<font color=red size=3>**AbstractApplicationContext #postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)**</font>

```java
/**
* Modify the application context's internal bean factory after its standard
* initialization. All bean definitions will have been loaded, but no beans
* will have been instantiated yet. This allows for registering special
* BeanPostProcessors etc in certain ApplicationContext implementations.
* @param beanFactory the bean factory used by the application context
*/
protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {
}
```



<font color=green>**比如说 : ServletWebServerApplicationContext  也实现了 postProcessBeanFactory( ) 方法**</font>

<font color=red size=3>**ServletWebServerApplicationContext #postProcessBeanFactory( )**</font>

- BeanFactory 添加一个 Bean的后置处理器 WebApplicationContextServletContextAwareProcessor
- 添加忽略的自动装配的接口 ServletContextAware
- 注册 Web 应用的作用域(Session , Request)

```java
/**
* Register ServletContextAwareProcessor.
* @see ServletContextAwareProcessor
*/
@Override
protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {
    beanFactory.addBeanPostProcessor(new WebApplicationContextServletContextAwareProcessor(this));
    beanFactory.ignoreDependencyInterface(ServletContextAware.class);
    registerWebApplicationScopes();
}
```

## 1.2 执行BeanFactoryPostProcessor

### 1.2.1 invokeBeanFactoryPostProcessors(beanFactory) (执行BeanFactoryPostProcessor的方法)

- 执行 BeanFactoryPostProcessor 的方法
- `BeanFactoryPostProcessor`
  
  - BeanFactory的后置处理器 , 在BeanFactory标准初始化之后执行的
- 两个接口 :  `BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor`
- <font color=red>BeanDefinitionRegistryPostProcessor 执行流程</font>
- ①.  获取所有的BeanDefinitionRegistryPostProcessor
    - ②.  先执行实现了`PriorityOrdered`优先级接口的 BeanDefinitionRegistryPostProcessor
        - postProcessor.postProcessBeanDefinitionRegistry(registry)
    - ③.  再执行实现了`Ordered`顺序接口的 BeanDefinitionRegistryPostProcessor
        - postProcessor.postProcessBeanDefinitionRegistry(registry)
    - ④.  最后执行没有实现任何优先级或者是顺序接口的BeanDefinitionRegistryPostProcessors
        -  postProcessor.postProcessBeanDefinitionRegistry(registry)
- <font color=red>BeanFactoryPostProcessor  执行流程</font>

    - ①.  获取所有的BeanFactoryPostProcessor
    - ②.  先执行实现了PriorityOrdered优先级接口的BeanFactoryPostProcessor
      - postProcessor.postProcessBeanFactory()
    - ③.  再执行实现了Ordered顺序接口的BeanFactoryPostProcessor
      - postProcessor.postProcessBeanFactory()
    - ④.  最后执行没有实现任何优先级或者是顺序接口的BeanFactoryPostProcessor
        - postProcessor.postProcessBeanFactory()

**[ 源码 ]**

<font color=red size=3>**PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors( )**</font>

- <font color=purple>BeanDefinitionRegistryPostProcessor.postProcessBeanDefinitionRegistry( ) </font>
  - 扫描Bean,然后将扫描到的Bean 放在 BeanDefinitionRegistry 这个Bean注册中心中
    - 这里扫描Bean 包含 @ComponentScan 扫描的Spring 模式注解的Bean 以及 使用 @Import 导入的Bean
  - 此时 ,  BeanDefinitionRegistry 中包含了所有扫描到的Bean

```java
public static void invokeBeanFactoryPostProcessors(
    ConfigurableListableBeanFactory beanFactory, List<BeanFactoryPostProcessor> beanFactoryPostProcessors) {

    Set<String> processedBeans = new HashSet<>();
	
    if (beanFactory instanceof BeanDefinitionRegistry) {
        BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;
        List<BeanFactoryPostProcessor> regularPostProcessors = new ArrayList<>();
        List<BeanDefinitionRegistryPostProcessor> registryProcessors = new ArrayList<>();

        for (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) {
            if (postProcessor instanceof BeanDefinitionRegistryPostProcessor) {
                BeanDefinitionRegistryPostProcessor registryProcessor =
                    (BeanDefinitionRegistryPostProcessor) postProcessor;
                // 将扫描的Bean 放在 BeanDefinitionRegistry 中
                registryProcessor.postProcessBeanDefinitionRegistry(registry);
                registryProcessors.add(registryProcessor);
            }
            else {
                regularPostProcessors.add(postProcessor);
            }
        }
		
        /*
        	不要在这里初始化factorybean:我们需要保留所有常规bean未初始化，让bean工厂的后处理程序应用于它们!
        	将实现了 PriorityOrdered, Ordered的 BeanDefinitionRegistryPostProcessors与其他处理器分开
        */     
        List<BeanDefinitionRegistryPostProcessor> currentRegistryProcessors = new ArrayList<>();

        // 首先 调用实现了 优先级接口(PriorityOrdered) 的 BeanDefinitionRegistryPostProcessors
        String[] postProcessorNames =
            beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);
        for (String ppName : postProcessorNames) {
            if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {
                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));
                processedBeans.add(ppName);
            }
        }
        sortPostProcessors(currentRegistryProcessors, beanFactory);
        registryProcessors.addAll(currentRegistryProcessors);       
        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);
        currentRegistryProcessors.clear();

        // 然后, 调用实现了顺序接口(Ordered) 的 BeanDefinitionRegistryPostProcessors
        postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);
        for (String ppName : postProcessorNames) {
            if (!processedBeans.contains(ppName) && beanFactory.isTypeMatch(ppName, Ordered.class)) {
                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));
                processedBeans.add(ppName);
            }
        }
        sortPostProcessors(currentRegistryProcessors, beanFactory);
        registryProcessors.addAll(currentRegistryProcessors);
        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);
        currentRegistryProcessors.clear();

        // 最后,调用没有实现任何优先级和顺序接口的 BeanDefinitionRegistryPostProcessors
        boolean reiterate = true;
        while (reiterate) {
            reiterate = false;
            postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);
            for (String ppName : postProcessorNames) {
                if (!processedBeans.contains(ppName)) {
                    currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));
                    processedBeans.add(ppName);
                    reiterate = true;
                }
            }
            sortPostProcessors(currentRegistryProcessors, beanFactory);
            registryProcessors.addAll(currentRegistryProcessors);
            invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);
            currentRegistryProcessors.clear();
        }

        // Now, invoke the postProcessBeanFactory callback of all processors handled so far.
        invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);
        invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);
    }

    else {
        // Invoke factory processors registered with the context instance.
        invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);
    }

    // Do not initialize FactoryBeans here: We need to leave all regular beans
    // uninitialized to let the bean factory post-processors apply to them!
    String[] postProcessorNames =
        beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false);

    // Separate between BeanFactoryPostProcessors that implement PriorityOrdered,
    // Ordered, and the rest.
    List<BeanFactoryPostProcessor> priorityOrderedPostProcessors = new ArrayList<>();
    List<String> orderedPostProcessorNames = new ArrayList<>();
    List<String> nonOrderedPostProcessorNames = new ArrayList<>();
    for (String ppName : postProcessorNames) {
        if (processedBeans.contains(ppName)) {
            // skip - already processed in first phase above
        }
        else if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {
            priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));
        }
        else if (beanFactory.isTypeMatch(ppName, Ordered.class)) {
            orderedPostProcessorNames.add(ppName);
        }
        else {
            nonOrderedPostProcessorNames.add(ppName);
        }
    }

    // First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.
    sortPostProcessors(priorityOrderedPostProcessors, beanFactory);
    invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);

    // Next, invoke the BeanFactoryPostProcessors that implement Ordered.
    List<BeanFactoryPostProcessor> orderedPostProcessors = new ArrayList<>();
    for (String postProcessorName : orderedPostProcessorNames) {
        orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));
    }
    sortPostProcessors(orderedPostProcessors, beanFactory);
    invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);

    // Finally, invoke all other BeanFactoryPostProcessors.
    List<BeanFactoryPostProcessor> nonOrderedPostProcessors = new ArrayList<>();
    for (String postProcessorName : nonOrderedPostProcessorNames) {
        nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));
    }
    invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);

    // Clear cached merged bean definitions since the post-processors might have
    // modified the original metadata, e.g. replacing placeholders in values...
    beanFactory.clearMetadataCache();
}
```



## 1.3 注册 BeanPostProcessor

### 1.3.1 registerBeanPostProcessors(beanFactory);

- <font color=red>注册 Bean的后置处理器 , 用于拦截Bean 的创建</font>
- <font color=red>BeanPostProcessor 的子接口</font>
  - DestructionAwareBeanPostProcessor
    - Bean销毁的回调
  - InstantiationAwareBeanPostProcessor
    - Bean初始化的回调
  - SmartInstantiationAwareBeanPostProcessor
  - MergedBeanDefinitionPostProcessor

- `registerBeanPostProcessors 执行流程`
  - <font color=red>①.  获取所有的 BeanPostProcessor</font>
    - 后置处理器都默认可以通过PriorityOrdered、Ordered接口来执行优先级
  - <font color=red>②.  注册 BeanPostProcessorChecker</font>
    - 当一个bean没有资格被所有BeanPostProcessor处理时，它记录一个信息消息
  - <font color=red>③.  分别注册实现了 PriorityOrdered优先级接口 ,  Ordered顺序接口 以及 没有实现任何优先级接口 的 BeanPostProcessor </font>
    - 把每一个BeanPostProcessor 添加到BeanFactory中
      - `beanFactory.addBeanPostProcessor(postProcessor)`
  - <font color=red>④. 最后注册所有的MergedBeanDefinitionPostProcessor</font>
  - <font color=red>⑤. 添加一个ApplicationListenerDetector 来在Bean创建完成后检查是否是ApplicationListener</font>
    - 如果是 就添加到容器的监听器中
      - applicationContext.addApplicationListener((ApplicationListener<?>) bean)

**[ 源码 ]**

<font color=red size=3>**PostProcessorRegistrationDelegate #registerBeanPostProcessors ( )**</font>

```java
public static void registerBeanPostProcessors(
    ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) {
	
    // 获取所有的 BeanPostProcessor
    String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false);

    //注册 BeanPostProcessorChecker, 当一个bean没有资格被所有BeanPostProcessor处理时，它记录一个信息消息
    int beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length;
    beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));

    //分别注册 实现了 PriorityOrdered优先级接口 ,  Ordered顺序接口 以及 没有实现任何优先级接口 的 BeanPostProcessor 
    List<BeanPostProcessor> priorityOrderedPostProcessors = new ArrayList<>();
    List<BeanPostProcessor> internalPostProcessors = new ArrayList<>();
    List<String> orderedPostProcessorNames = new ArrayList<>();
    List<String> nonOrderedPostProcessorNames = new ArrayList<>();
    for (String ppName : postProcessorNames) {
        if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) {
            BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);
            priorityOrderedPostProcessors.add(pp);
            if (pp instanceof MergedBeanDefinitionPostProcessor) {
                internalPostProcessors.add(pp);
            }
        }
        else if (beanFactory.isTypeMatch(ppName, Ordered.class)) {
            orderedPostProcessorNames.add(ppName);
        }
        else {
            nonOrderedPostProcessorNames.add(ppName);
        }
    }
    sortPostProcessors(priorityOrderedPostProcessors, beanFactory);
    registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);
    List<BeanPostProcessor> orderedPostProcessors = new ArrayList<>();
    for (String ppName : orderedPostProcessorNames) {
        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);
        orderedPostProcessors.add(pp);
        if (pp instanceof MergedBeanDefinitionPostProcessor) {
            internalPostProcessors.add(pp);
        }
    }
    sortPostProcessors(orderedPostProcessors, beanFactory);
    registerBeanPostProcessors(beanFactory, orderedPostProcessors);
    List<BeanPostProcessor> nonOrderedPostProcessors = new ArrayList<>();
    for (String ppName : nonOrderedPostProcessorNames) {
        BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);
        nonOrderedPostProcessors.add(pp);
        if (pp instanceof MergedBeanDefinitionPostProcessor) {
            internalPostProcessors.add(pp);
        }
    }
    registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);

   // 注册 所有的 MergedBeanDefinitionPostProcessor
    sortPostProcessors(internalPostProcessors, beanFactory);
    registerBeanPostProcessors(beanFactory, internalPostProcessors);

   //将检测内部bean的后处理器重新注册为 ApplicationListenerDetector， 将其移动到处理器链的末尾(用于获取代理等)。
    beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext));
}
```



## 1.4 初始化 MessageSource

### 1.4.1 InitMessageSource()

- <font color=red>初始化MessageSource组件（做国际化 , 消息绑定，消息解析）</font>

- `initMessageSource执行流程`
  - <font color=red>①.  获取BeanFactory</font>
  - <font color=red>②.  看容器中是否有id为messageSource的，类型是MessageSource的组件</font>
    - `MessageSource`：取出国际化配置文件中的某个key的值, 能按照区域信息获取
    - 如果有赋值给容器的 messageSource 属性
    - <font color=red>如果没有 , 就创建一个DelegatingMessageSource , 把创建好的MessageSource注册在容器中</font>
      - `beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource)`
      - `MessageSource.getMessage(String code, Object[] args, String defaultMessage, Locale locale)`
        - 以后以后获取国际化配置文件的值的时候，可以自动注入MessageSource 

**[ 源码 ]**

<font color=red size=3>**AbstractApplicationContext #initMessageSource( )**</font>

```java
/**
* Initialize the MessageSource.
* Use parent's if none defined in this context.
*/
protected void initMessageSource() {
    ConfigurableListableBeanFactory beanFactory = getBeanFactory();
    //  看容器中是否有id为 messageSource的，类型是MessageSource的组件
    if (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) {
        // 如果有 MessageSource的组件, 就赋值给 容器的messageSource属性
        this.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);
        if (this.parent != null && this.messageSource instanceof HierarchicalMessageSource) {
            HierarchicalMessageSource hms = (HierarchicalMessageSource) this.messageSource;
            if (hms.getParentMessageSource() == null) {
                hms.setParentMessageSource(getInternalParentMessageSource());
            }
        }
    }
    else {
        // 如果没有 MessageSource的组件,就创建一个 DelegatingMessageSource 的Bean注册到容器中
        DelegatingMessageSource dms = new DelegatingMessageSource();
        dms.setParentMessageSource(getInternalParentMessageSource());
        this.messageSource = dms;
        beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);
    }
}
```



## 1.5 初始化事件派发器和监听器等

### 1.5.1 initApplicationEventMulticaster()

- <font color=red>初始化事件派发器</font>
- `initApplicationEventMulticaster 流程`
  - <font color=red>①.  获取BeanFactory</font>
  - <font color=red>②.  从BeanFactory中获取的 ApplicationEventMulticaster 类型的事件派发器</font>
    - 我们可以自定义 一个事件派发器
  - <font color=red>③.  如果上一步没有获取到ApplicationEventMulticaster ,  创建一个SimpleApplicationEventMulticaster</font>
  - <font color=red>④.  将创建的ApplicationEventMulticaster添加到BeanFactory中，以后其他组件直接自动注入</font>

**[ 源码 ]**

<font color=red size=3>**AbstractApplicationContext #initApplicationEventMulticaster( )**</font>

```java
/**
* Initialize the ApplicationEventMulticaster.
* Uses SimpleApplicationEventMulticaster if none defined in the context.
* @see org.springframework.context.event.SimpleApplicationEventMulticaster
*/
protected void initApplicationEventMulticaster() {
    ConfigurableListableBeanFactory beanFactory = getBeanFactory();
    if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) {
        this.applicationEventMulticaster =
            beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);
        if (logger.isTraceEnabled()) {
            logger.trace("Using ApplicationEventMulticaster [" + this.applicationEventMulticaster + "]");
        }
    }
    else {
        this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory);
        beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);
        if (logger.isTraceEnabled()) {
            logger.trace("No '" + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + "' bean, using " +
                         "[" + this.applicationEventMulticaster.getClass().getSimpleName() + "]");
        }
    }
}
```



### 1.5.2 onRefresh()

- <font color=red>留给子容器（子类）</font>

**[ 源码 ]**

<font color=red size=3>**AbstractApplicationContext #onRefresh( )**</font>

```java
/**
* Template method which can be overridden to add context-specific refresh work.
* Called on initialization of special beans, before instantiation of singletons.
* <p>This implementation is empty.
* @throws BeansException in case of errors
* @see #refresh()
*/
protected void onRefresh() throws BeansException {
    // For subclasses: do nothing by default.
}
```



### 1.5.3 registerListeners()

- <font color=red>注册容器中将所有项目里面的ApplicationListener</font>
- `registerListeners 执行流程`
  - <font color=red>①.  从容器中拿到所有的ApplicationListener</font>
  - <font color=red>②.  将每个监听器添加到事件派发器中</font>
    - ​	getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName)
  - <font color=red>③.  派发之前步骤产生的事件</font>

**[ 源码 ]**

<font color=red size=3>**AbstractApplicationContext #registerListeners( )**</font>

```java
/**
* Add beans that implement ApplicationListener as listeners.
* Doesn't affect other listeners, which can be added without being beans.
*/
protected void registerListeners() {
    // Register statically specified listeners first.
    for (ApplicationListener<?> listener : getApplicationListeners()) {
        getApplicationEventMulticaster().addApplicationListener(listener);
    }

    // Do not initialize FactoryBeans here: We need to leave all regular beans
    // uninitialized to let post-processors apply to them!
    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false);
    for (String listenerBeanName : listenerBeanNames) {
        getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
    }

    // 发布一些早期要使用的事件
    Set<ApplicationEvent> earlyEventsToProcess = this.earlyApplicationEvents;
    this.earlyApplicationEvents = null;
    if (earlyEventsToProcess != null) {
        for (ApplicationEvent earlyEvent : earlyEventsToProcess) {
            getApplicationEventMulticaster().multicastEvent(earlyEvent);
        }
    }
}
```



## 1.6 初始化单实例Bean

### 1.6.1 finishBeanFactoryInitialization(beanFactory)

- <font color=red> 实例化剩下的非懒加载的 单实例Bean</font>
  - 实际通过  beanFactory.preInstantiateSingletons() 进行实例化

**[ 源码 ]**

<font color=red size=3>**①. AbstractApplicationContext #finishBeanFactoryInitialization( )**</font>

```java
/**
* Finish the initialization of this context's bean factory,
* initializing all remaining singleton beans.
*/
protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {
    // 初始化 类型转化组件 ConversionService
    if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &&
        beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {
        beanFactory.setConversionService(
            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));
    }
    if (!beanFactory.hasEmbeddedValueResolver()) {
        beanFactory.addEmbeddedValueResolver(strVal -> getEnvironment().resolvePlaceholders(strVal));
    }
    String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);
    for (String weaverAwareName : weaverAwareNames) {
        getBean(weaverAwareName);
    }
    beanFactory.setTempClassLoader(null);
    beanFactory.freezeConfiguration();

    // 实例化剩下的非懒加载的 单实例Bean
    beanFactory.preInstantiateSingletons();
}
```



<font color=red size=3>**②. DefaultListableBeanFactory #preInstantiateSingletons( )**</font>

- - <font color=red>①. 获取容器中的所有Bean，依次进行初始化和创建对象 </font>
  - <font color=red>②.  获取Bean的定义信息 => RootBeanDefinition </font>
  - <font color=red>③.  如果Bean不是抽象的，是单实例的，是懒加载 </font>
    - i.  判断是否是FactoryBean ( 是否是实现FactoryBean接口的Bean )
    - ii.  不是工厂Bean , 利用getBean(beanName)  创建对象
      - <font color=blue>实际调用  AbstractBeanFactory#doGetBean 方法</font>
  - <font color=red>④.   所有Bean都利用getBean创建完成以后 </font>
    - 检查所有的Bean是否是SmartInitializingSingleton接口的
      - 如果是 , 就执行afterSingletonsInstantiated( ) 

```java
@Override
public void preInstantiateSingletons() throws BeansException {
    if (logger.isTraceEnabled()) {
        logger.trace("Pre-instantiating singletons in " + this);
    }

	// 获取容器中所有的Bean
    List<String> beanNames = new ArrayList<>(this.beanDefinitionNames);

    //通过Bean名称获取Bean的定义信息 RootBeanDefinition
    for (String beanName : beanNames) {
        RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);
        //判断是不是单实例 非懒加载的Bean
        if (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()) {
            // 判断是不是工厂Bean
            if (isFactoryBean(beanName)) {
                Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);
                if (bean instanceof FactoryBean) {
                    final FactoryBean<?> factory = (FactoryBean<?>) bean;
                    boolean isEagerInit;
                    if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {
                        isEagerInit = AccessController
                            		.doPrivileged((PrivilegedAction<Boolean>)
									 ((SmartFactoryBean<?>) factory)::isEagerInit,
                                     	 getAccessControlContext());
                    }
                    else {
                        isEagerInit = (factory instanceof SmartFactoryBean &&
                                       ((SmartFactoryBean<?>) factory).isEagerInit());
                    }
                    if (isEagerInit) {
                        getBean(beanName);
                    }
                }
            }
            // 非工厂Bean 利用getBean(beanName)  创建对象
            else {
                getBean(beanName);
            }
        }
    }

   //创建完Bean后 ,如果该Bean实现了 SmartInitializingSingleton接口,则调用该Bean的 afterSingletonsInstantiated 方法
    for (String beanName : beanNames) {
        Object singletonInstance = getSingleton(beanName);
        if (singletonInstance instanceof SmartInitializingSingleton) {
            final SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;
            if (System.getSecurityManager() != null) {
                AccessController.doPrivileged((PrivilegedAction<Object>) () -> {
                    smartSingleton.afterSingletonsInstantiated();
                    return null;
                }, getAccessControlContext());
            }
            else {
                smartSingleton.afterSingletonsInstantiated();
            }
        }
    }
}
```



<font color=red size=3>**②. AbstractBeanFactory #doGetBean( )**</font>

- <font color=red>①. 先尝试从缓存中获取保存的单实例Bean , 如果能获取到说明这个Bean之前被创建过</font>
  - <font color=blue>所有创建过的单实例Bean都会被缓存起来</font>
  - <font color=blue>从Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>( 256 ) 中获取</font>
    - `key `:  Bean 名称
    - `value `: Bean实例
  - IOC  容器 就是这些Map , 保存着单实例Bean ,环境信息等
- <font color=red>②.  缓存中获取不到，开始Bean的创建对象流程</font>
  - <font color=red>1. 获取Bean工厂</font>
  - <font color=red>2. 为了防止多线程下重复创建Bean , 标记当前将要创建的Bean 为已创建</font>
  - <font color=red>3. 获取Bean的定义信息  RootBeanDefinition</font>
  - <font color=red>4. 尝试获取当前Bean依赖的其他Bean , 如果有按照getBean( )把依赖的Bean先创建出</font>
  - <font color=red>5. 通过  createBean ( ) 创建单实例Bean</font>
  - <font color=red>6. 将创建的单实例Bean 放在 缓存 singletonObjects 中</font>

```java
protected <T> T doGetBean(final String name, @Nullable final Class<T> requiredType,
                          @Nullable final Object[] args, boolean typeCheckOnly) throws BeansException {
    final String beanName = transformedBeanName(name);
    Object bean;

    // 先从缓存中获取保存的单实例Bean, 因为创建过的单实例 Bean都会被缓存起来
    Object sharedInstance = getSingleton(beanName);
    if (sharedInstance != null && args == null) {        
        bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);
    }

    else {
        if (isPrototypeCurrentlyInCreation(beanName)) {
            throw new BeanCurrentlyInCreationException(beanName);
        }

        // 获取Bean工厂
        BeanFactory parentBeanFactory = getParentBeanFactory();        
        // 处理父子容器(Spring与SpringMvc)
        if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {
            String nameToLookup = originalBeanName(name);
            if (parentBeanFactory instanceof AbstractBeanFactory) {
                return ((AbstractBeanFactory) parentBeanFactory).doGetBean(
                    nameToLookup, requiredType, args, typeCheckOnly);
            }
            else if (args != null) {
                return (T) parentBeanFactory.getBean(nameToLookup, args);
            }
            else if (requiredType != null) {
                return parentBeanFactory.getBean(nameToLookup, requiredType);
            }
            else {
                return (T) parentBeanFactory.getBean(nameToLookup);
            }
        }
		// 标记当前Bean已创建,防止多线程下Bean的重复创建
        if (!typeCheckOnly) {
            markBeanAsCreated(beanName);
        }

        try {
            // 获取Bean的定义信息 RootBeanDefinition
            final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
            checkMergedBeanDefinition(mbd, beanName, args);

            // 获取当前Bean依赖的其他Bean;如果有按照getBean()把依赖的Bean先创建出来
            String[] dependsOn = mbd.getDependsOn();
            if (dependsOn != null) {
                for (String dep : dependsOn) {
                    if (isDependent(beanName, dep)) {
                        // throw new BeanCreationException...
                    }
                    registerDependentBean(dep, beanName);
                    try {
                        getBean(dep);
                    }
                    catch (NoSuchBeanDefinitionException ex) {
                        // throw new BeanCreationException...
                    }
                }
            }

            // 如果Bean是单实例的
            if (mbd.isSingleton()) {
                sharedInstance = getSingleton(beanName, () -> {
                    try {
                        // 创建单实例的Bean
                        return createBean(beanName, mbd, args);
                    }
                    catch (BeansException ex) {
                        destroySingleton(beanName);
                        throw ex;
                    }
                });
                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
            }
			
            else if (mbd.isPrototype()) {
                // It's a prototype -> create a new instance.
                Object prototypeInstance = null;
                try {
                    beforePrototypeCreation(beanName);
                    prototypeInstance = createBean(beanName, mbd, args);
                }
                finally {
                    afterPrototypeCreation(beanName);
                }
                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);
            }

            else {
                String scopeName = mbd.getScope();
                final Scope scope = this.scopes.get(scopeName);
                if (scope == null) {
                    // throw new IllegalStateException....
                }
                try {
                    Object scopedInstance = scope.get(beanName, () -> {
                        beforePrototypeCreation(beanName);
                        try {
                            return createBean(beanName, mbd, args);
                        }
                        finally {
                            afterPrototypeCreation(beanName);
                        }
                    });
                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);
                }
                catch (IllegalStateException ex) {
                   // ...
                }
            }
        }
        catch (BeansException ex) {
            cleanupAfterBeanCreationFailure(beanName);
            throw ex;
        }
    }

    // Check if required type matches the type of the actual bean instance.
   	//...
    return (T) bean;
}
```



<font color=red size=3>**③.  AbstractAutowireCapableBeanFactory#createBean( )**</font>

- <font color=red>①. resolveBeanClass  --> 解析得到当前Bean 的Class对象 , 并且设置到RootBeanDefinition 中</font>
- ②.  resolveBeforeInstantiation --> 让BeanPostProcessor先拦截返回代理对象
  - 如果当前Bean实现了 InstantiationAwareBeanPostProcessor 接口  【提前执行】
    - 首先 调用 postProcessBeforeInstantiation( )  方法 --> 初始化的方法
    - 然后 , 如果上一步有返回值 , 再继续调用  postProcessAfterInitialization( ) 方法
- <font color=red>③.  通过 doCreateBean(beanName, mbdToUse, args)  方法创建普通的单实例Bean</font>

```java
/**
* Central method of this class: creates a bean instance,
* populates the bean instance, applies post-processors, etc.
* @see #doCreateBean
*/
@Override
protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)
    throws BeanCreationException {
    RootBeanDefinition mbdToUse = mbd;

    // 解析得到Bean的Class对象
    Class<?> resolvedClass = resolveBeanClass(mbd, beanName);
    if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
        mbdToUse = new RootBeanDefinition(mbd);
        mbdToUse.setBeanClass(resolvedClass);
    }
    try {
        mbdToUse.prepareMethodOverrides();
    }
    catch (BeanDefinitionValidationException ex) {
        //throw new BeanDefinitionStoreException...
    }

    try {
        Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
        if (bean != null) {
            return bean;
        }
    }
    catch (Throwable ex) {
        //throw new BeanCreationException...
    }
    try {
        // 
        Object beanInstance = doCreateBean(beanName, mbdToUse, args);
        return beanInstance;
    }
    catch (BeanCreationException | ImplicitlyAppearedSingletonException ex) {      
    }
    catch (Throwable ex) {
      // throw new BeanCreationException...
    }
}
```



<font color=red size=3>**④. AbstractAutowireCapableBeanFactory #doCreateBean( )**</font>

- <font color=red>①.  createBeanInstance( )  创建Bean实例</font>
  - 利用 构造器创建出Bean的实例
- <font color=red>②. populateBean( )  为Bean的属性赋值</font>
  - 查看 ==源码⑤==
- <font color=red>③. initializeBean( )  初始化Bean</font>
  - 查看 ==源码⑥==
- <font color=red>④.  注册Bean的销毁方法</font>

```java
protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args) throws BeanCreationException {

    BeanWrapper instanceWrapper = null;
    if (mbd.isSingleton()) {
        instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);
    }
    // 创建Bean 实例
    if (instanceWrapper == null) {
        instanceWrapper = createBeanInstance(beanName, mbd, args);
    }
    final Object bean = instanceWrapper.getWrappedInstance();
    Class<?> beanType = instanceWrapper.getWrappedClass();
    if (beanType != NullBean.class) {
        mbd.resolvedTargetType = beanType;
    }

    // Allow post-processors to modify the merged bean definition.
    synchronized (mbd.postProcessingLock) {
        if (!mbd.postProcessed) {
            try {
                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
            }
            catch (Throwable ex) {
                //throw new BeanCreationException...
            }
            mbd.postProcessed = true;
        }
    }
    boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&
                                      isSingletonCurrentlyInCreation(beanName));
    if (earlySingletonExposure) {
        addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));
    }
   
    Object exposedObject = bean;
    try {
        // Bean 的属性赋值
        populateBean(beanName, mbd, instanceWrapper);
        // Bean的初始化
        exposedObject = initializeBean(beanName, exposedObject, mbd);
    }
    catch (Throwable ex) {
        //throw new BeanCreationException ...
    }

    if (earlySingletonExposure) {
        Object earlySingletonReference = getSingleton(beanName, false);
        if (earlySingletonReference != null) {
            if (exposedObject == bean) {
                exposedObject = earlySingletonReference;
            }
            else if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {
                String[] dependentBeans = getDependentBeans(beanName);
                Set<String> actualDependentBeans = new LinkedHashSet<>(dependentBeans.length);
                for (String dependentBean : dependentBeans) {
                    if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {
                        actualDependentBeans.add(dependentBean);
                    }
                }
                if (!actualDependentBeans.isEmpty()) {
                    //throw new BeanCurrentlyInCreationException...
                }
            }
        }
    }

    // 注册Bean的销毁方法
    try {
        registerDisposableBeanIfNecessary(beanName, bean, mbd);
    }
    catch (BeanDefinitionValidationException ex) {
        //throw new BeanCreationException ...					
    }
    return exposedObject;
}
```



<font color=red size=3>**⑤. AbstractAutowireCapableBeanFactory #populateBean( )**</font>

- ①.  如果Bean实现了 InstantiationAwareBeanPostProcessor  后置处理器
  - 执行 postProcessAfterInstantiation( ) 方法
  - 执行 postProcessPropertyValues( ) 方法
- <font color=red>②.  applyPropertyValues( ) 设置Bean的属性值</font>

```java
protected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) {
    if (bw == null) {
        if (mbd.hasPropertyValues()) {
            throw new BeanCreationException(
                mbd.getResourceDescription(), beanName, "Cannot apply property values to null instance");
        }
        else {
            return;
        }
    }
    boolean continueWithPropertyPopulation = true;
	// 调用 InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation() 方法
    if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {
        for (BeanPostProcessor bp : getBeanPostProcessors()) {
            if (bp instanceof InstantiationAwareBeanPostProcessor) {
                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
                if (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {
                    continueWithPropertyPopulation = false;
                    break;
                }
            }
        }
    }

    if (!continueWithPropertyPopulation) {
        return;
    }

    PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : null);
	// @AutoWired 依赖注入
    if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) 	{
        MutablePropertyValues newPvs = new MutablePropertyValues(pvs);
        if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME) {
            autowireByName(beanName, mbd, bw, newPvs);
        }
        if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) {
            autowireByType(beanName, mbd, bw, newPvs);
        }
        pvs = newPvs;
    }
 
    boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();
    boolean needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);

    PropertyDescriptor[] filteredPds = null;
    if (hasInstAwareBpps) {
        if (pvs == null) {
            pvs = mbd.getPropertyValues();
        }
        for (BeanPostProcessor bp : getBeanPostProcessors()) {
            if (bp instanceof InstantiationAwareBeanPostProcessor) {
                InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;
                PropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);
                if (pvsToUse == null) {
                    if (filteredPds == null) {
                        filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
                    }
                    pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);
                    if (pvsToUse == null) {
                        return;
                    }
                }
                pvs = pvsToUse;
            }
        }
    }
    if (needsDepCheck) {
        if (filteredPds == null) {
            filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);
        }
        checkDependencies(beanName, mbd, filteredPds, pvs);
    }
	// 为Bean的属性进行赋值
    if (pvs != null) {
        applyPropertyValues(beanName, mbd, bw, pvs);
    }
}
```



<font color=red size=3>**⑥. AbstractAutowireCapableBeanFactory #initializeBean( )**</font>

- <font color=red>①.  invokeAwareMethods ( ) ==> 执行三个Aware接口方法</font>
  - `BeanNameAware  / BeanClassLoaderAware  / BeanFactoryAware`
- <font color=red>②.  applyBeanPostProcessorsBeforeInitialization( ) ==> 执行BeanPostProcessor.postProcessBeforeInitialization 方法</font>
  - Bean 初始化方法执行之前
- <font color=red>③.  invokeInitMethods( ) </font>
  - 调用 Bean 的初始化方法
- <font color=red>④.  applyBeanPostProcessorsBeforeInitialization( ) ==> 执行BeanPostProcessor.postProcessBeforeInitialization 方法</font>
  - Bean 初始化方法执行之后

```java
protected Object initializeBean(final String beanName, final Object bean, @Nullable RootBeanDefinition mbd) {
    if (System.getSecurityManager() != null) {
        AccessController.doPrivileged((PrivilegedAction<Object>) () -> {
            // 执行Aware接口方法
            invokeAwareMethods(beanName, bean);
            return null;
        }, getAccessControlContext());
    }
    else {
        invokeAwareMethods(beanName, bean);
    }

    Object wrappedBean = bean;
    if (mbd == null || !mbd.isSynthetic()) {
        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
    }

    try {
        invokeInitMethods(beanName, wrappedBean, mbd);
    }
    catch (Throwable ex) {
       // throw new BeanCreationException ...            
    }
    if (mbd == null || !mbd.isSynthetic()) {
        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
    }

    return wrappedBean;
}
```



## 1.7 完成BeanFactory的初始化创建工作

### 1.7.1 finishRefresh()

- <font color=red>IOC容器就创建完成</font>

**[源码]**

<font color=red size=3>**AbstractApplicationContext #finishRefresh()**</font>

- <font color=red>①.   initLifecycleProcessor() ==> 初始化和生命周期有关的后置处理器 ( LifecycleProcessor )</font>
  - 默认从容器中找是否有lifecycleProcessor的组件【LifecycleProcessor】
    - 如果没有new DefaultLifecycleProcessor()  加入到容器
- <font color=red>②.  getLifecycleProcessor().onRefresh()</font>
  - ​	拿到前面定义的生命周期处理器（BeanFactory）, 回调onRefresh()
- <font color=red>③.  publishEvent(new ContextRefreshedEvent(this)) ==> 发布容器刷新完成事件</font>
- <font color=red>④.  LiveBeansView.registerApplicationContext(this);</font>	

```java
/**
* Finish the refresh of this context, invoking the LifecycleProcessor's
* onRefresh() method and publishing the
* {@link org.springframework.context.event.ContextRefreshedEvent}.
*/
protected void finishRefresh() {
    // Clear context-level resource caches (such as ASM metadata from scanning).
    clearResourceCaches();

    // Initialize lifecycle processor for this context.
    initLifecycleProcessor();

    // Propagate refresh to lifecycle processor first.
    getLifecycleProcessor().onRefresh();

    // Publish the final event.
    publishEvent(new ContextRefreshedEvent(this));

    // Participate in LiveBeansView MBean, if active.
    LiveBeansView.registerApplicationContext(this);
}
```



# 2. Spring容器创建总结

- <font color=red>①.  Spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息</font>
  - xml注册bean；<bean>
  - 注解注册Bean；@Service、@Component、@Bean、xxx
- <font color=red>②.  Spring容器会在合适的时机创建这些Bean</font>
  - 用到这个bean的时候 , 利用getBean创建bean, 然后创建好以后保存在容器中
  - finishBeanFactoryInitialization( ) 统一创建剩下所有的bean
- <font color=red>③.  后置处理器 : BeanPostProcessor</font>
  - 每一个bean创建完成，都会使用各种后置处理器进行处理来增强bean的功能
    - `AutowiredAnnotationBeanPostProcessor`
      - 处理自动注入
    - `AnnotationAwareAspectJAutoProxyCreator`
      - 来做AOP功能
    - `AsyncAnnotationBeanPostProcessor`
      - 增强的功能注解
- <font color=red>④.  事件驱动模型</font>
  - ApplicationListener :  事件监听器
  - ApplicationEventMulticaster : 事件派发

​	































































